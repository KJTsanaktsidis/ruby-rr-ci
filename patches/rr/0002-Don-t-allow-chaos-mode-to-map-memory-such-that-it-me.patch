From d3b50b5c1ba1ae5c7264ccf38e43a754a58e3061 Mon Sep 17 00:00:00 2001
From: KJ Tsanaktsidis <kj@kjtsanaktsidis.id.au>
Date: Sun, 20 Oct 2024 19:25:38 +1100
Subject: [PATCH 2/2] Don't allow chaos mode to map memory such that it merges
 with the stack

When running a program under rr, we remove MAP_GROWSDOWN from the stack
mapping. If rr in chaos mode subsequently places a mapping immediately
above the stack, it will actually get merged into the same VMA.

This is a problem because glibc actually looks at /proc/self/maps to dig
out the stack top in pthread_attr_getstack; this will be wrong if the
stack VMA is actually merged with another one.

Co-authored-by: Rian McGuire <rian@rian.id.au>
---
 src/AddressSpace.cc | 13 +++++++++++--
 1 file changed, 11 insertions(+), 2 deletions(-)

diff --git a/src/AddressSpace.cc b/src/AddressSpace.cc
index 54d60ef1..b0c18f31 100644
--- a/src/AddressSpace.cc
+++ b/src/AddressSpace.cc
@@ -2275,10 +2275,19 @@ void AddressSpace::populate_address_space(Task* t) {
 
 static MemoryRange adjust_range_for_stack_growth(const KernelMapping& km) {
   remote_ptr<void> start = km.start();
+  remote_ptr<void> end = km.end();
   if (km.flags() & MAP_GROWSDOWN) {
     start = min(start, km.end() - AddressSpace::chaos_mode_min_stack_size());
-  }
-  return MemoryRange(start, km.end());
+    // We actually must separate mappings from the stack by at least one page - otherwise the
+    // kernel might merge the VMA we're allocating with the stack! That actually can only happen
+    // under rr anyway, because we strip out the MAP_GROWSDOWN flag out of the mmap flags. This
+    // causes problems for glibc - in particular pthread_attr_getstack will open /proc/self/maps
+    // and fish around for the top of the initial thread's stack, and it will get the wrong value
+    // if the stack VMA is merged with the one above it.
+    start -= page_size();
+    end += page_size();
+  }
+  return MemoryRange(start, end);
 }
 
 static MemoryRange overlaps_excluded_range(const RecordSession& session, MemoryRange range) {
-- 
2.47.0

