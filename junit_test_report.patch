From 21a61d27087b83efdf0291cd3485d951e82329e4 Mon Sep 17 00:00:00 2001
From: KJ Tsanaktsidis <kj@kjtsanaktsidis.id.au>
Date: Mon, 22 Jul 2024 12:20:30 +1000
Subject: [PATCH] Implement JUnit XML test reporting

---
 bootstraptest/runner.rb      |  40 ++++-
 tool/lib/junit_xml_output.rb | 291 +++++++++++++++++++++++++++++++++++
 tool/lib/test/unit.rb        |  13 +-
 3 files changed, 337 insertions(+), 7 deletions(-)
 create mode 100644 tool/lib/junit_xml_output.rb

diff --git a/bootstraptest/runner.rb b/bootstraptest/runner.rb
index 24324fa51f..97a66f4911 100755
--- a/bootstraptest/runner.rb
+++ b/bootstraptest/runner.rb
@@ -12,6 +12,7 @@
 begin
   require 'fileutils'
   require 'tmpdir'
+  require 'pathname'
 rescue LoadError
   $:.unshift File.join(File.dirname(__FILE__), '../lib')
   retry
@@ -78,7 +79,9 @@ def Dir.mktmpdir(prefix_suffix=nil, tmpdir=nil)
                 :platform,
                 :timeout,
                 :timeout_scale,
-                :launchable_test_reports
+                :launchable_test_reports,
+                :junit_xml_writer,
+                :junit_suite_group_name
                 )
 BT = Class.new(bt) do
   def indent=(n)
@@ -225,6 +228,8 @@ def main
     -s, --stress                    stress test.
     -v, --verbose                   Output test name before exec.
     -q, --quiet                     Don\'t print header message.
+        --junit-filename=OUT        Emit a JUnit-style XML test report to OUT
+        --junit-suite-group-name=X  Suite group name to put in Junit XML output
     -h, --help                      Print this message and quit.
 End
       exit true
@@ -243,6 +248,19 @@ def main
         writer.close
       }
       true
+    when /\A--junit-suite-group-name=(.*)\z/
+      BT.junit_suite_group_name = $1
+    when /\A--junit-filename=(.*)\z/
+      junit_filename = $1
+      require_relative '../tool/lib/junit_xml_output'
+      BT.junit_xml_writer = JUnitXMLOutput::Writer.new 'btest'
+      BT.junit_xml_writer.started!
+      at_exit do
+        BT.junit_xml_writer.finished!
+        BT.junit_suite_group_name&.tap { BT.junit_xml_writer.test_run_name = _1 }
+        BT.junit_xml_writer.write_to_file junit_filename
+      end
+      true
     else
       false
     end
@@ -257,7 +275,7 @@ def main
   BT.progress = %w[- \\ | /]
   BT.progress_bs = "\b" * BT.progress[0].size
   BT.tty = $stderr.tty? if BT.tty.nil?
-  BT.wn ||= /-j(\d+)?/ =~ (ENV["MAKEFLAGS"] || ENV["MFLAGS"]) ? $1.to_i : 1
+  BT.wn ||= /(?:\A|\s)-j(\d+)?/ =~ (ENV["MAKEFLAGS"] || ENV["MFLAGS"]) ? $1.to_i : 1
 
   case BT.color
   when nil
@@ -426,6 +444,7 @@ def exec_test(paths)
   else
     prev_basename = nil
     Assertion.all.each do |basename, assertions|
+      BT.junit_xml_writer&.started_testsuite! basename
       if !BT.quiet && basename != prev_basename
         prev_basename = basename
         $stderr.printf("%s%-*s ", erase(BT.quiet), BT.width, basename)
@@ -437,8 +456,15 @@ def exec_test(paths)
       error = BT_STATE.error
 
       assertions.each do |assertion|
+        old_error = BT_STATE.error
+        BT.junit_xml_writer&.started_testcase!(
+          "##{assertion.id}: #{assertion.relative_path}:#{assertion.lineno}", assertion.relative_path, assertion.lineno
+        )
+
         BT_STATE.count += 1
         assertion.call
+
+        BT.junit_xml_writer&.finished_testcase!(BT_STATE.error == old_error ? :pass : :failure)
       end
 
       if BT.tty
@@ -453,6 +479,8 @@ def exec_test(paths)
         end
       end
       $stderr.puts if !BT.quiet and (BT.tty or BT_STATE.error == error)
+    ensure
+      BT.junit_xml_writer&.finished_testsuite!
     end
   end
 
@@ -487,7 +515,7 @@ def target_platform
   BT.platform or RUBY_PLATFORM
 end
 
-class Assertion < Struct.new(:src, :path, :lineno, :proc)
+class Assertion < Struct.new(:src, :path, :lineno, :proc, :fullpath)
   prepend Launchable
   @count = 0
   @all = Hash.new{|h, k| h[k] = []}
@@ -650,6 +678,10 @@ def make_srcfile(frozen_string_literal: nil)
     }
     filename
   end
+
+  def relative_path
+    Pathname.new(fullpath).relative_path_from(File.join(__dir__, '..')).to_s
+  end
 end
 
 def add_assertion src, pr
@@ -657,7 +689,7 @@ def add_assertion src, pr
   lineno = loc.lineno
   path = File.basename(loc.path)
 
-  Assertion.new(src, path, lineno, pr)
+  Assertion.new(src, path, lineno, pr, loc.path)
 end
 
 def assert_equal(expected, testsrc, message = '', opt = '', **kwargs)
diff --git a/tool/lib/junit_xml_output.rb b/tool/lib/junit_xml_output.rb
new file mode 100644
index 0000000000..96fbae0005
--- /dev/null
+++ b/tool/lib/junit_xml_output.rb
@@ -0,0 +1,291 @@
+require 'time'
+
+module JUnitXMLOutput
+
+  module XMLMethods
+    XML_REPLACEMENTS = {
+      '<' => '&lt;',
+      '>' => '&gt;',
+      '"' => '&quot;',
+      "'" => '&apos;',
+      '&' => '&amp;',
+    }.freeze
+    XML_REPLACEMENTS_REGEX = Regexp.union(XML_REPLACEMENTS.keys).freeze
+
+    def xml_escape(str)
+      str.to_s.gsub(/[[:cntrl:]]/, '').gsub(XML_REPLACEMENTS_REGEX, XML_REPLACEMENTS)
+    end
+
+    def build_xml_element(element, attrs, body)
+      [
+        "<",
+        element,
+        (attrs && attrs.any?) ? " " : "",
+        attrs.map { |k, v| "#{k}=\"#{xml_escape(v)}\"" }.join(' '),
+        ">",
+        body,
+        "</",
+        element,
+        ">"
+      ].compact.join
+    end
+  end
+
+  class TestSuiteGroup
+    include XMLMethods
+    attr_accessor :name, :test_count, :failure_count, :started_at, :finished_at
+    attr_accessor :testsuites
+
+    def initialize
+      @testsuites = []
+      @test_count = 0
+      @failure_count = 0
+    end
+
+    def to_xml_string
+      attrs = {}
+      attrs['name'] = @name if @name
+      attrs['tests'] = @test_count if @test_count
+      attrs['failures'] = @failure_count if @failure_count
+      attrs['timestamp'] = @started_at.iso8601 if @started_at
+      attrs['time'] = @finished_at - @started_at if @started_at && @finished_at
+      build_xml_element('testsuites', attrs, testsuites.map(&:to_xml_string).join)
+    end
+  end
+
+  class TestSuite
+    include XMLMethods
+    attr_accessor :name, :test_count, :failure_count, :started_at, :finished_at
+    attr_accessor :file, :output_capture, :testcases
+
+    def initialize
+      @testcases = []
+      @test_count = 0
+      @failure_count = 0
+    end
+
+    def to_xml_string
+      attrs = {}
+      attrs['name'] = @name if @name
+      attrs['tests'] = @test_count if @test_count
+      attrs['failures'] = @failure_count if @failure_count
+      attrs['timestamp'] = @started_at.iso8601 if @started_at
+      attrs['time'] = @finished_at - @started_at if @started_at && @finished_at
+      attrs['file'] = @file if @file
+      body_parts = testcases.map(&:to_xml_string)
+
+      if @output_capture
+        body_parts << build_xml_element('system-out', {}, xml_escape(@output_capture.captured))
+      end
+
+      build_xml_element('testsuite', attrs, body_parts.join)
+    end
+  end
+
+  class TestCase
+    include XMLMethods
+    attr_accessor :name, :started_at, :finished_at, :file, :line, :status
+    attr_accessor :output_capture
+
+    def to_xml_string
+      attrs = {}
+      attrs['name'] = @name if @name
+      attrs['time'] = @finished_at - @started_at if @started_at && @finished_at
+      attrs['file'] = @file if @file
+      attrs['line'] = @line if @line
+
+      body_parts = []
+      case @status
+      when :pass
+      when :failure
+        body_parts << '<failure />'
+      when :skipped
+        body_parts << '<skipped />'
+      when :error
+        body_parts << '<error />'
+      end
+
+      if @output_capture
+        body_parts << build_xml_element('system-out', {}, xml_escape(@output_capture.captured))
+      end
+
+      build_xml_element('testcase', attrs, body_parts.join)
+    end
+  end
+
+  class OutputCapturer
+    attr_reader :captured
+
+    def start!
+      @old_stdout = $stdout.dup
+      @old_stderr = $stderr.dup
+      @pipe_r, @pipe_w = IO.pipe
+      $stdout.reopen @pipe_w
+      $stderr.reopen @pipe_w
+      @captured = +""
+      @tee_thread = Thread.new(&method(:run_tee))
+    end
+
+    def finish!
+      $stdout.reopen @old_stdout
+      $stderr.reopen @old_stderr
+      @pipe_w.close
+      @tee_thread.join
+      @pipe_r.close
+      @old_stdout.close
+      @old_stderr.close
+    end
+
+    private
+
+    def run_tee
+      loop do
+        data = @pipe_r.readpartial(4096)
+        @captured << data
+        @old_stdout.write data
+      rescue EOFError
+        return
+      end
+    end
+  end
+
+  class Writer
+    def initialize(test_run_name = 'test')
+      @test_suite_group = TestSuiteGroup.new.tap do |g|
+        g.name = test_run_name
+      end
+    end
+
+    attr_reader :test_suite_group, :current_testsuite, :current_testcase
+
+    def test_run_name
+      @test_suite_group.name
+    end
+
+    def test_run_name=(name)
+      @test_suite_group.name = name
+    end
+
+
+    def to_xml_string
+      '<?xml version = "1.0" encoding = "UTF-8" ?>' + @test_suite_group.to_xml_string + "\n"
+    end
+
+    def started!
+      @test_suite_group.started_at = Time.now
+    end
+
+    def finished!
+      @test_suite_group.finished_at = Time.now
+    end
+
+    def started_testsuite!(name)
+      @current_testsuite = TestSuite.new.tap do |ts|
+        # Java-ize the test name for Jenkins' benefit
+        ts.name = "#{@test_suite_group.name}.#{name.gsub(/\//, '.').gsub(/\.rb$/, '')}"
+        ts.started_at = Time.now
+        ts.output_capture = OutputCapturer.new
+        ts.output_capture.start!
+      end
+      @test_suite_group.testsuites << @current_testsuite
+    end
+
+    def finished_testsuite!
+      @current_testsuite.finished_at = Time.now
+      @current_testsuite.output_capture.finish!
+      @test_suite_group.test_count += @current_testsuite.test_count
+      @test_suite_group.failure_count += @current_testsuite.failure_count
+      @current_testsuite = nil
+    end
+
+    def started_testcase!(name, file, line)
+      @current_testcase = TestCase.new.tap do |tc|
+        tc.name = name
+        tc.file = file
+        tc.line = line
+        tc.started_at = Time.now
+        tc.output_capture = OutputCapturer.new
+        tc.output_capture.start!
+      end
+      @current_testsuite.testcases << @current_testcase
+    end
+
+    def finished_testcase!(status = nil)
+      @current_testcase.finished_at = Time.now
+      @current_testcase.status = status if status
+      @current_testcase.output_capture.finish!
+      @current_testsuite.test_count += 1
+      @current_testsuite.failure_count += 1 if [:failure, :error].include?(@current_testcase.status)
+      @current_testcase = nil
+    end
+
+    def write_to_file(filename)
+      File.open(filename, 'w') do |f|
+        f.write to_xml_string
+      end
+    end
+  end
+
+  module TestUnitSupport
+    def record(suite, method, assertions, time, error, source_location = nil)
+      status = case error
+      when nil
+        :pass
+      when Test::Unit::PendedError
+        :skipped
+      when Test::Unit::AssertionFailedError
+        :failure
+      else
+        :error
+      end
+
+      @junit_xml_reporter&.current_testcase&.status = status
+      super
+    end
+
+    private
+
+    def setup_options(opts, options)
+      super
+      opts.on_tail '--junit-filename=PATH', String, 'JUnit XML format output' do |path|
+        @junit_xml_reporter = JUnitXMLOutput::Writer.new
+        at_exit do
+          @junit_xml_reporter.write_to_file path
+        end
+      end
+
+      opts.on_tail '--junit-suite-group-name=NAME', String, 'Suite group name to put in Junit XML output' do |name|
+        @junit_xml_suite_group_name = name
+      end
+    end
+
+    def _calc_suite_name(suite) = ::Class.instance_method(:name).bind(suite).call.to_s
+    def _calc_test_name(inst) = "#{_calc_suite_name(inst.class)}##{inst.__name__.to_s}"
+    def _calc_test_file_line(inst) = ::Object.instance_method(:method).bind(inst).call(inst.__name__).source_location
+
+    def _run_suites(suites, type)
+      @junit_xml_reporter&.test_suite_group.name = @junit_xml_suite_group_name if @junit_xml_suite_group_name
+      @junit_xml_reporter&.started!
+      super
+    ensure
+      @junit_xml_reporter&.finished!
+    end
+
+    def _run_suite(suite, type)
+      @junit_xml_reporter&.started_testsuite! _calc_suite_name(suite)
+      return super
+    ensure
+      @junit_xml_reporter&.finished_testsuite!
+    end
+
+    def _start_method(inst)
+      @junit_xml_reporter&.started_testcase! _calc_test_name(inst), *_calc_test_file_line(inst)
+      super
+    end
+
+    def _end_method(inst)
+      @junit_xml_reporter&.finished_testcase!
+      super
+    end
+  end
+end
diff --git a/tool/lib/test/unit.rb b/tool/lib/test/unit.rb
index be619e1445..a2e584c501 100644
--- a/tool/lib/test/unit.rb
+++ b/tool/lib/test/unit.rb
@@ -19,6 +19,7 @@ def warn(message, category: nil, **kwargs)
 require_relative '../colorize'
 require_relative '../leakchecker'
 require_relative '../test/unit/testcase'
+require_relative '../junit_xml_output'
 require 'optparse'
 
 # See Test::Unit
@@ -1659,7 +1660,7 @@ def _run_suite suite, type
           _start_method(inst)
           inst._assertions = 0
 
-          print "#{suite}##{method.inspect.sub(/\A:/, '')} = " if @verbose
+          print "#{suite}##{method.inspect.sub(/\A:/, '')} = yyyy" if @verbose
 
           start_time = Time.now if @verbose
           result =
@@ -1669,15 +1670,20 @@ def _run_suite suite, type
               inst.run self
             end
 
-          print "%.2f s = " % (Time.now - start_time) if @verbose
+          print " __HELLO1__ #{@verbose}__"
+          print "%.2f s = zzzz" % (Time.now - start_time) if @verbose
+          print " __HELLO2__ #{result.inspect} #{@verbose}__"
           print result
+          print " __HELLO3__ #{@verbose}__"
           puts if @verbose
+          print " __HELLO4__ #{@verbose}__\n"
           $stdout.flush
 
-          leakchecker.check("#{inst.class}\##{inst.__name__}")
 
           _end_method(inst)
 
+          leakchecker.check("#{inst.class}\##{inst.__name__}")
+
           inst._assertions
         }
         return assertions.size, assertions.inject(0) { |sum, n| sum + n }
@@ -1789,6 +1795,7 @@ def status io = self.output
       prepend Test::Unit::TimeoutOption
       prepend Test::Unit::RunCount
       prepend Test::Unit::LaunchableOption::Nothing
+      prepend JUnitXMLOutput::TestUnitSupport
 
       ##
       # Begins the full test run. Delegates to +runner+'s #_run method.
-- 
2.45.2

